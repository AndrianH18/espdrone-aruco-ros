<?xml version="1.0"?>
<launch>
  
  <!-- Configurations -->
  <arg name="drone_name" default="espdrone"/>
  <arg name="drone_ip_addr" default="192.168.43.42"/>
  <arg name="camera_info_file" default="$(find espdrone_aruco_bringup)/config/espdrone/camera_calib/ost.yaml"/>
  <arg name="visualize_output" default="true"/>
  <arg name="aruco_marker_size" default="0.16"/>
  <arg name="aruco_map_config_file" default="$(find espdrone_aruco_bringup)/config/environment/aruco_maps/hall_map.yml"/>
  <arg name="marker_map_frame" default="aruco_map"/>
  <arg name="world_fixed_frame" default="map"/>
  
  <!-- ESP-drone add service -->
  <include file="$(find espdrone_driver)/launch/espdrone_add.launch">
    <arg name="uri" value="$(arg drone_ip_addr)" />
    <arg name="tf_prefix" value="$(arg drone_name)" />
    <arg name="roll_trim" value="0" />
    <arg name="pitch_trim" value="0" />
    <arg name="enable_logging" value="True" />
    <arg name="enable_parameters" value="True" />
    <arg name="use_ros_time" value="True" />
    <arg name="enable_logging_image" value="True" />
    <arg name="enable_logging_pose" value="True" />
    <arg name="camera_info_file" value="$(arg camera_info_file)" />
  </include>
  
  <group ns="/$(arg drone_name)">
    <!-- Republish camera stream topic published by 'espdrone_server' using image_transport, needed for image_proc -->
    <node pkg="espdrone_utils" type="image_transport_republisher" name="image_transport_republisher" output="screen"/>

    <!-- Camera undistortion -->
    <node pkg="image_proc" type="image_proc" name="image_proc" output="screen"/>

    <!-- Image filter to enhance ArUco marker detection -->
    <include file="$(find aruco_mapping_filter)/launch/aruco_mapping_filter.launch"/>
  </group>

  <!-- ArUco mapping stuff -->

  <!-- Remap 'position' topic published by 'aruco_map_pose_tracker' node into '/<drone_name>/external_position' subscribed
       by 'espdrone_server'. This will force-update the ESP-drone's internal position estimate (since our goal is to use the
       onboard camera and the ArUco marker map as positioning system).
   -->
  <remap from="/$(arg drone_name)/aruco_map_pose_tracker/position" to="/$(arg drone_name)/external_position"/>

  <include file="$(find aruco_ros)/launch/map.launch">
    <arg name="camera_name" value="$(arg drone_name)"/>
    <arg name="marker_size" value="$(arg aruco_marker_size)"/>
    <arg name="map_config" value="$(arg aruco_map_config_file)"/>
    <arg name="visualize" value="$(arg visualize_output)"/>
    <arg name="marker_map_frame" value="$(arg marker_map_frame)"/>
    <arg name="world_fixed_frame" value="$(arg world_fixed_frame)"/>
  </include>

</launch>